[
    {
        "id": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "type": "tab",
        "createdDate": "2022-10-13T07:44:30.284Z",
        "label": "idGenerator",
        "disabled": false,
        "info": "",
        "functionSeq": 0,
        "generateNext": true,
        "serviceName": "idGenerator",
        "relativeParentPath": ""
    },
    {
        "id": "sd_Hj2XvgfQsiOMPFUO",
        "type": "HttpIn",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "server",
        "nodeType": "start",
        "name": "",
        "path": "id",
        "uploadpath": "",
        "summary": "API to generate an Unique ID based on a custom input pattern",
        "description": "The following API can be used to generate a unique ID based on a pattern specified by the user. The API can generate alphanumeric ID of a user specified length by passing the argument {alphanumeric:LENGTH} in the body, wherein \"LENGTH\" is to be replaced by a numeric value of the desired  length of the alphanumeric ID to be generated (ex- {alphanumeric:10} generates a 10 character unique alphanumeric ID). The API also supports adding the current date to the generated ID by passing the argument {timestamp:DATEFORMAT}, wherein \"DATEFORMAT\" is to be replaced by a valid Date Format such as \"DDMMYYYY\" , \"MMDDYYYY\", \"YYYYMMDD\" , etc. (ex- {timestamp:DDMMYYYY} would add the current date in the format of DDMMYYYY to the final generated ID). Other than the above arguments , The generated ID can contain any characters that are passed into the api, The order of the generated ID shall be in the same order in which the arguments and other characters are passed into the API.",
        "method": "post",
        "sequenceId": "",
        "consumes": "",
        "produces": "",
        "filetype": "path",
        "acceptFileUpload": false,
        "useDataModel": false,
        "dataModelIsArray": false,
        "erd": "",
        "erdName": "",
        "entity": "",
        "ref": "",
        "editableListData": {
            "responses": [],
            "params": [
                {
                    "key": "pattern",
                    "desc": "The API accepts an Object that must contain a key \"pattern\" followed by its value which is the input pattern based on which the ID is generated. ex- {     \"pattern\" : \" {timestamp:DDMMYYYY}-ABC-{alphanumeric:10}\" }  ",
                    "type": "body",
                    "required": false,
                    "rowId": "sd_uXn9FORuRWrZmqQD",
                    "valid": true
                }
            ],
            "produces": [],
            "consumes": []
        },
        "inputs": 0,
        "outputs": 1,
        "validateRequestUsingSwaggerDocs": false,
        "category": "HTTP",
        "x": 25,
        "y": 80,
        "wires": [
            [
                "sd_YvyDotsrSCXqTGjb"
            ]
        ],
        "__ssdTypeInputs__": {
            "uploadpath": {
                "type": "str",
                "value": "",
                "nullable": "true",
                "nullableValue": "",
                "constant": false
            }
        },
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "idGenerator",
        "functionName": "sd_Hj2XvgfQsiOMPFUO",
        "generated": false
    },
    {
        "id": "sd_nRpBzUfovwqQ5a2e",
        "type": "Script",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "for (let i = 0; i < bh.splitarr.length; i++) {\n\n    if (bh.splitarr[i].includes('timestamp')) {\n        \n        bh.splitarr[i] = bh.input.OutputDateformat;\n    }\n    else if (bh.splitarr[i].includes('uuid')) {\n        bh.splitarr[i] = bh.input.uuidresult;\n    }\n    \n}\n\nbh.input.patternid = bh.splitarr.join('');",
        "functionName": "sd_nRpBzUfovwqQ5a2e",
        "category": "Function",
        "x": 685,
        "y": 260,
        "wires": [
            [
                "sd_yKOohlXQFPFDnjte"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_YvyDotsrSCXqTGjb",
        "type": "Script",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "// console.log(bh.input.body['pattern'])\nconst characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nfunction generateString(length) {\n    let result = '';\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n}\n// if(bh.input.body['pattern']=\"\"){\n//     generateString(20);\n// }\n// else{\nbh.splitarr = bh.input.body['pattern'].split(/({.*?})/g);\n\nfor (let i = 0; i < bh.splitarr.length; i++) {\n   \n    if (bh.splitarr[i].includes('alphanumeric')) {\n        var len = bh.splitarr[i].split(':')[1];\n        bh.splitarr[i] = generateString(parseInt(len));\n    }\n\n    else if (bh.splitarr[i].includes('timestamp')) {\n        bh.input.InputDateformat = bh.splitarr[i].split(':')[1].replace('}', '');\n    }\n    else if (bh.splitarr[i].includes('uuid')){\n        bh.input.generateuuid=bh.splitarr[i];\n    }\n}\n// }\nbh.test = new Date();\n",
        "functionName": "sd_YvyDotsrSCXqTGjb",
        "category": "Function",
        "x": 145,
        "y": 100,
        "wires": [
            [
                "sd_O82qTh7HJ7JGwr3E"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_iRNGn0aSLEIaG9mn",
        "type": "354466cf-80ff-82f9-5a2a-d61303612450",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "inputReference": "bh.res",
        "action": "format",
        "unit": "years",
        "unitFormat": "bh.input.InputDateformat",
        "startDate": "bh",
        "endDate": "bh",
        "resultMapping": "bh.input.OutputDateformat",
        "functionName": "sd_iRNGn0aSLEIaG9mn",
        "category": "Date",
        "x": 385,
        "y": 360,
        "wires": [
            [
                "sd_nRpBzUfovwqQ5a2e"
            ]
        ],
        "__ssdTypeInputs__": {
            "inputReference": {
                "type": "bh",
                "value": "res",
                "constant": false
            },
            "unitFormat": {
                "type": "bh.input",
                "value": "InputDateformat",
                "constant": false
            },
            "startDate": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "endDate": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "resultMapping": {
                "type": "bh.input",
                "value": "OutputDateformat",
                "constant": false
            }
        },
        "__n_excludedFromValidation__": {
            "unit": true,
            "startDate": true,
            "endDate": true
        },
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_Cq6Rc2526nin3lV5",
        "type": "6bf7e803-907f-9550-90ed-3620ebd2b04e",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "action": "ParseDate",
        "date": "bh",
        "dateFormat": "bh",
        "object": "bh",
        "locale": "bh",
        "array": "bh",
        "dateObject": "bh.test",
        "timestamp": "bh",
        "resultMapping": "bh.res",
        "functionName": "sd_Cq6Rc2526nin3lV5",
        "category": "Date",
        "x": 305,
        "y": 360,
        "wires": [
            [
                "sd_iRNGn0aSLEIaG9mn"
            ]
        ],
        "__ssdTypeInputs__": {
            "date": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "dateFormat": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "object": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "locale": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "array": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "dateObject": {
                "type": "bh",
                "value": "test",
                "constant": false
            },
            "timestamp": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "resultMapping": {
                "type": "bh",
                "value": "res",
                "constant": false
            }
        },
        "__n_excludedFromValidation__": {
            "object": true,
            "array": true,
            "timestamp": true,
            "date": true,
            "dateFormat": true,
            "locale": true
        },
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_12AEr3ttEa2GZOCE",
        "type": "Mongodb",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "server",
        "nodeType": "flow",
        "name": "createindexmongo",
        "databaseConfig": "sd_U4PHMi8wnz0S98uN",
        "collection": "\"IDs\"",
        "options": "bh.input.opts",
        "resultMapping": "bh.insertresult",
        "operation": "createIndex",
        "argumentArray": [
            "fieldOrSpec"
        ],
        "aggregate": "",
        "operations": "",
        "query": "bh",
        "fieldOrSpec": "bh.input.keys",
        "filter": "",
        "key": "",
        "docId": "",
        "indexName": "",
        "replacement": "",
        "update": "",
        "xAxis": "",
        "yAxis": "",
        "indexes": "",
        "docs": "",
        "document": "bh.input.data",
        "newName": "",
        "doc": "",
        "filePath": "",
        "fileName": "",
        "pipeline": "",
        "functionName": "createindexmongo",
        "category": "Storage",
        "x": 805,
        "y": 380,
        "wires": [
            [
                "sd_bEOpDGCoKRlUPqev"
            ]
        ],
        "__ssdTypeInputs__": {
            "collection": {
                "type": "str",
                "value": "IDs",
                "constant": false
            },
            "options": {
                "type": "bh.input",
                "value": "opts",
                "nullable": "true",
                "constant": false
            },
            "resultMapping": {
                "type": "bh",
                "value": "insertresult",
                "constant": false
            },
            "query": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "document": {
                "type": "bh.input",
                "value": "data",
                "constant": false
            },
            "fieldOrSpec": {
                "type": "bh.input",
                "value": "keys",
                "constant": false
            }
        },
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "idGenerator",
        "generated": false
    },
    {
        "id": "sd_cCoQ2x8kZw888q6u",
        "type": "Script",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "\n\nbh.input.keys={\"generated_id\":1};\n\nbh.input.opts={ unique: true };\n\n// bh.input.data.generated_id=bh.input.patternid;",
        "functionName": "sd_cCoQ2x8kZw888q6u",
        "category": "Function",
        "x": 705,
        "y": 380,
        "wires": [
            [
                "sd_12AEr3ttEa2GZOCE"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "idGenerator",
        "generated": false
    },
    {
        "id": "sd_bEOpDGCoKRlUPqev",
        "type": "Script",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "console.log(bh.insertresult)",
        "functionName": "sd_bEOpDGCoKRlUPqev",
        "category": "Function",
        "x": 945,
        "y": 380,
        "wires": [
            []
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": true,
        "serviceName": "idGenerator",
        "generated": false
    },
    {
        "id": "sd_yKOohlXQFPFDnjte",
        "type": "Script",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "bh.input.data={};\n\nbh.input.data.generated_id=bh.input.patternid;\n\n// var nowDate=new Date();\n// bh.input.date = nowDate.getDate()+'/'+(nowDate.getMonth()+1)+'/'+nowDate.getFullYear();\n// bh.input.data.date_added=bh.input.date;\n\nbh.input.data.created=new Date();\n\n\n\n\n// bh.input.data.generated_id=\"18102022-ABC-ND4os5gPGm\";",
        "functionName": "sd_yKOohlXQFPFDnjte",
        "category": "Function",
        "x": 545,
        "y": 140,
        "wires": [
            [
                "sd_yo1vwDqD7b1DJuvW"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_9lsxrUWc184YxMcr",
        "type": "Switch",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "property": "insertresult.result.ok",
        "propertyType": "bh",
        "propertyGv": "bh.insertresult.result.ok",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "literal",
                "gv": "0"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "literal",
                "gv": "1"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "functionName": "sd_9lsxrUWc184YxMcr",
        "category": "Function",
        "x": 665,
        "y": 40,
        "wires": [
            [
                "sd_YvyDotsrSCXqTGjb"
            ],
            [
                "sd_J2aPCtkOXWkpdLQ9"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_J2aPCtkOXWkpdLQ9",
        "type": "Script",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "console.log(\"success\");",
        "functionName": "sd_J2aPCtkOXWkpdLQ9",
        "category": "Function",
        "x": 765,
        "y": 100,
        "wires": [
            [
                "sd_klUXaWRvo8ImahqW"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_klUXaWRvo8ImahqW",
        "type": "HttpOut",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "server",
        "nodeType": "flow",
        "name": "",
        "headers": {},
        "responseBody": {
            "type": "bh.input",
            "value": "patternid",
            "ssd_typedInputField": true
        },
        "httpcode": {
            "type": "num",
            "value": 200,
            "ssd_typedInputField": true
        },
        "responseType": "obj",
        "swaggerResponse": {},
        "responseMapping": {
            "status": 200,
            "obj": "bh.input.patternid",
            "send": "bh.input.patternid"
        },
        "dataModelIsArray": false,
        "inputs": 1,
        "outputs": 0,
        "erd": "",
        "entity": "",
        "ref": "",
        "editableListData": {
            "headers": [],
            "produces": [],
            "responses": [
                {
                    "key": "done",
                    "value": "200",
                    "rowId": "sd_rpwCKKrYVoWgODqp",
                    "valid": true
                }
            ]
        },
        "cookiesList": {},
        "switchStates": {
            "headers": "Map",
            "cookies": "Map"
        },
        "functionName": "sd_klUXaWRvo8ImahqW",
        "category": "HTTP",
        "x": 865,
        "y": 100,
        "wires": [],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_yo1vwDqD7b1DJuvW",
        "type": "Mongodb",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "server",
        "nodeType": "flow",
        "name": "AddtoMongo",
        "databaseConfig": "sd_U4PHMi8wnz0S98uN",
        "collection": "\"IDs\"",
        "options": "bh.input.opts",
        "resultMapping": "bh.insertresult",
        "operation": "insertOne",
        "argumentArray": [
            "document"
        ],
        "aggregate": "",
        "operations": "",
        "query": "bh",
        "fieldOrSpec": "bh.input.keys",
        "filter": "",
        "key": "",
        "docId": "",
        "indexName": "",
        "replacement": "",
        "update": "",
        "xAxis": "",
        "yAxis": "",
        "indexes": "",
        "docs": "",
        "document": "bh.input.data",
        "newName": "",
        "doc": "",
        "filePath": "",
        "fileName": "",
        "pipeline": "",
        "functionName": "addtoMongo",
        "category": "Storage",
        "x": 625,
        "y": 140,
        "wires": [
            [
                "sd_9lsxrUWc184YxMcr"
            ]
        ],
        "__ssdTypeInputs__": {
            "collection": {
                "type": "str",
                "value": "IDs",
                "constant": false
            },
            "options": {
                "type": "bh.input",
                "value": "",
                "nullable": "true",
                "constant": false
            },
            "resultMapping": {
                "type": "bh",
                "value": "insertresult",
                "constant": false
            },
            "query": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "document": {
                "type": "bh.input",
                "value": "data",
                "constant": false
            },
            "fieldOrSpec": {
                "type": "bh.input",
                "value": "keys",
                "constant": false
            }
        },
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_o8BhQTnHFc10wVoH",
        "type": "2324f0b2-56b6-677a-2cfd-04b88a58919a",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "operation": "V4",
        "uuid": "bh",
        "uuidBytes": "bh",
        "options": "bh",
        "namespaceName": "bh",
        "namespace": "bh",
        "buffer": "bh",
        "offset": "bh",
        "resultMapping": "bh.input.uuidresult",
        "functionName": "sd_o8BhQTnHFc10wVoH",
        "category": "Uuid",
        "x": 265,
        "y": 180,
        "wires": [
            [
                "sd_9cUxCNdSZOPZg3Z9"
            ]
        ],
        "__ssdTypeInputs__": {
            "uuid": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "uuidBytes": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "options": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "namespaceName": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "namespace": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "buffer": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "offset": {
                "type": "bh",
                "value": "",
                "constant": false
            },
            "resultMapping": {
                "type": "bh.input",
                "value": "uuidresult",
                "constant": false
            }
        },
        "__n_excludedFromValidation__": {
            "uuid": true,
            "uuidBytes": true,
            "namespaceName": true,
            "namespace": true
        },
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_9cUxCNdSZOPZg3Z9",
        "type": "Script",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "script": "console.log(bh.test);\nconsole.log(bh.res);\n",
        "functionName": "sd_9cUxCNdSZOPZg3Z9",
        "category": "Function",
        "x": 365,
        "y": 180,
        "wires": [
            [
                "sd_Ewt0ZGCx855UUPOr"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_O82qTh7HJ7JGwr3E",
        "type": "Switch",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "property": "generateuuid",
        "propertyType": "bh.input",
        "propertyGv": "bh.input.generateuuid",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "functionName": "sd_O82qTh7HJ7JGwr3E",
        "category": "Function",
        "x": 145,
        "y": 260,
        "wires": [
            [
                "sd_o8BhQTnHFc10wVoH"
            ],
            [
                "sd_Cq6Rc2526nin3lV5"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    },
    {
        "id": "sd_Ewt0ZGCx855UUPOr",
        "type": "Switch",
        "z": "SSD_SERVICE_ID_sd_0FrKeUOH7UXlT8BD",
        "viewType": "common",
        "nodeType": "flow",
        "name": "",
        "property": "res",
        "propertyType": "bh",
        "propertyGv": "bh.res",
        "rules": [
            {
                "t": "else"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "functionName": "sd_Ewt0ZGCx855UUPOr",
        "category": "Function",
        "x": 445,
        "y": 260,
        "wires": [
            [
                "sd_nRpBzUfovwqQ5a2e"
            ],
            [
                "sd_Cq6Rc2526nin3lV5"
            ]
        ],
        "__n_excludedFromValidation__": {},
        "generateNext": false,
        "serviceName": "idGenerator",
        "generated": true
    }
]
